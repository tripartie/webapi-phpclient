<?php
/**
 * RequestCreateTransactionTemplate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  TripartieWebAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie Web API
 *
 * This document describes all use cases offered by the Tripartie Web API.<br /><br /> The Tripartie Web API allows you to easily create Transaction templates.<br /> A Transaction template allows a User (the Buyer) to safely initiate a Transaction pre-configured by another User (the Seller).<br /> This allows you to add a Secured Payment button on your website pages.<br /><br /> To facilitate working with the Web API, we built libraries for common development environment:<br/> <ul class=\"bullet\">   <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/tripartie/webapi-jsclient\">Javascript</a></li> </ul> <br/> You're reading the documentation for version 1.0 of the Web API.<br/> Go to version <select id=\"version-switcher\"></select>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@tripartie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TripartieWebAPI\Model;

use \ArrayAccess;
use \TripartieWebAPI\ObjectSerializer;

/**
 * RequestCreateTransactionTemplate Class Doc Comment
 *
 * @category Class
 * @package  TripartieWebAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class RequestCreateTransactionTemplate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Request_CreateTransactionTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'description' => 'string',
        'externalId' => 'string',
        'sellerExternalId' => 'string',
        'sellerTripartieId' => 'string',
        'subTotal' => 'int',
        'shippingCosts' => 'int',
        'packageFormat' => '\TripartieWebAPI\Model\RequestCreateTransactionTemplatePackageFormat',
        'shippingProviders' => 'string[]',
        'currency' => 'string',
        'flow' => 'string',
        'productCategory' => 'string',
        'adUrl' => 'string',
        'allowPriceChange' => 'bool',
        'allowInPerson' => 'bool',
        'allowDelivery' => 'bool',
        'picture' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'description' => null,
        'externalId' => null,
        'sellerExternalId' => null,
        'sellerTripartieId' => null,
        'subTotal' => null,
        'shippingCosts' => null,
        'packageFormat' => null,
        'shippingProviders' => null,
        'currency' => null,
        'flow' => null,
        'productCategory' => null,
        'adUrl' => null,
        'allowPriceChange' => null,
        'allowInPerson' => null,
        'allowDelivery' => null,
        'picture' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'description' => 'description',
        'externalId' => 'externalId',
        'sellerExternalId' => 'sellerExternalId',
        'sellerTripartieId' => 'sellerTripartieId',
        'subTotal' => 'subTotal',
        'shippingCosts' => 'shippingCosts',
        'packageFormat' => 'packageFormat',
        'shippingProviders' => 'shippingProviders',
        'currency' => 'currency',
        'flow' => 'flow',
        'productCategory' => 'productCategory',
        'adUrl' => 'adUrl',
        'allowPriceChange' => 'allowPriceChange',
        'allowInPerson' => 'allowInPerson',
        'allowDelivery' => 'allowDelivery',
        'picture' => 'picture'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'description' => 'setDescription',
        'externalId' => 'setExternalId',
        'sellerExternalId' => 'setSellerExternalId',
        'sellerTripartieId' => 'setSellerTripartieId',
        'subTotal' => 'setSubTotal',
        'shippingCosts' => 'setShippingCosts',
        'packageFormat' => 'setPackageFormat',
        'shippingProviders' => 'setShippingProviders',
        'currency' => 'setCurrency',
        'flow' => 'setFlow',
        'productCategory' => 'setProductCategory',
        'adUrl' => 'setAdUrl',
        'allowPriceChange' => 'setAllowPriceChange',
        'allowInPerson' => 'setAllowInPerson',
        'allowDelivery' => 'setAllowDelivery',
        'picture' => 'setPicture'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'description' => 'getDescription',
        'externalId' => 'getExternalId',
        'sellerExternalId' => 'getSellerExternalId',
        'sellerTripartieId' => 'getSellerTripartieId',
        'subTotal' => 'getSubTotal',
        'shippingCosts' => 'getShippingCosts',
        'packageFormat' => 'getPackageFormat',
        'shippingProviders' => 'getShippingProviders',
        'currency' => 'getCurrency',
        'flow' => 'getFlow',
        'productCategory' => 'getProductCategory',
        'adUrl' => 'getAdUrl',
        'allowPriceChange' => 'getAllowPriceChange',
        'allowInPerson' => 'getAllowInPerson',
        'allowDelivery' => 'getAllowDelivery',
        'picture' => 'getPicture'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SHIPPING_PROVIDERS_COLISSIMO = 'colissimo';
    const SHIPPING_PROVIDERS_TNT = 'tnt';
    const SHIPPING_PROVIDERS_CHRONOPOST = 'chronopost';
    const SHIPPING_PROVIDERS_DPD = 'dpd';
    const SHIPPING_PROVIDERS_UPS = 'ups';
    const SHIPPING_PROVIDERS_DHL = 'dhl';
    const SHIPPING_PROVIDERS_FEDEX = 'fedex';
    const SHIPPING_PROVIDERS_SWISS_POST = 'swiss-post';
    const PRODUCT_CATEGORY_AUTO_MOTO = 'auto_moto';
    const PRODUCT_CATEGORY_FASHION = 'fashion';
    const PRODUCT_CATEGORY_HOUSE_GARDEN = 'house_garden';
    const PRODUCT_CATEGORY_SERVICE = 'service';
    const PRODUCT_CATEGORY_SPORT = 'sport';
    const PRODUCT_CATEGORY_TELECOM = 'telecom';
    const PRODUCT_CATEGORY_OTHER = 'other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingProvidersAllowableValues()
    {
        return [
            self::SHIPPING_PROVIDERS_COLISSIMO,
            self::SHIPPING_PROVIDERS_TNT,
            self::SHIPPING_PROVIDERS_CHRONOPOST,
            self::SHIPPING_PROVIDERS_DPD,
            self::SHIPPING_PROVIDERS_UPS,
            self::SHIPPING_PROVIDERS_DHL,
            self::SHIPPING_PROVIDERS_FEDEX,
            self::SHIPPING_PROVIDERS_SWISS_POST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductCategoryAllowableValues()
    {
        return [
            self::PRODUCT_CATEGORY_AUTO_MOTO,
            self::PRODUCT_CATEGORY_FASHION,
            self::PRODUCT_CATEGORY_HOUSE_GARDEN,
            self::PRODUCT_CATEGORY_SERVICE,
            self::PRODUCT_CATEGORY_SPORT,
            self::PRODUCT_CATEGORY_TELECOM,
            self::PRODUCT_CATEGORY_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = $data['title'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['externalId'] = $data['externalId'] ?? null;
        $this->container['sellerExternalId'] = $data['sellerExternalId'] ?? null;
        $this->container['sellerTripartieId'] = $data['sellerTripartieId'] ?? null;
        $this->container['subTotal'] = $data['subTotal'] ?? null;
        $this->container['shippingCosts'] = $data['shippingCosts'] ?? null;
        $this->container['packageFormat'] = $data['packageFormat'] ?? null;
        $this->container['shippingProviders'] = $data['shippingProviders'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['flow'] = $data['flow'] ?? null;
        $this->container['productCategory'] = $data['productCategory'] ?? 'other';
        $this->container['adUrl'] = $data['adUrl'] ?? null;
        $this->container['allowPriceChange'] = $data['allowPriceChange'] ?? true;
        $this->container['allowInPerson'] = $data['allowInPerson'] ?? true;
        $this->container['allowDelivery'] = $data['allowDelivery'] ?? true;
        $this->container['picture'] = $data['picture'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['subTotal'] === null) {
            $invalidProperties[] = "'subTotal' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['flow'] === null) {
            $invalidProperties[] = "'flow' can't be null";
        }
        $allowedValues = $this->getProductCategoryAllowableValues();
        if (!is_null($this->container['productCategory']) && !in_array($this->container['productCategory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'productCategory', must be one of '%s'",
                $this->container['productCategory'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string|null $externalId The Transaction template's External ID.
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets sellerExternalId
     *
     * @return string|null
     */
    public function getSellerExternalId()
    {
        return $this->container['sellerExternalId'];
    }

    /**
     * Sets sellerExternalId
     *
     * @param string|null $sellerExternalId The Seller's External ID.
     *
     * @return self
     */
    public function setSellerExternalId($sellerExternalId)
    {
        $this->container['sellerExternalId'] = $sellerExternalId;

        return $this;
    }

    /**
     * Gets sellerTripartieId
     *
     * @return string|null
     */
    public function getSellerTripartieId()
    {
        return $this->container['sellerTripartieId'];
    }

    /**
     * Sets sellerTripartieId
     *
     * @param string|null $sellerTripartieId The Seller's Tripartie ID.
     *
     * @return self
     */
    public function setSellerTripartieId($sellerTripartieId)
    {
        $this->container['sellerTripartieId'] = $sellerTripartieId;

        return $this;
    }

    /**
     * Gets subTotal
     *
     * @return int
     */
    public function getSubTotal()
    {
        return $this->container['subTotal'];
    }

    /**
     * Sets subTotal
     *
     * @param int $subTotal The price, in cents.
     *
     * @return self
     */
    public function setSubTotal($subTotal)
    {
        $this->container['subTotal'] = $subTotal;

        return $this;
    }

    /**
     * Gets shippingCosts
     *
     * @return int|null
     */
    public function getShippingCosts()
    {
        return $this->container['shippingCosts'];
    }

    /**
     * Sets shippingCosts
     *
     * @param int|null $shippingCosts The shipping costs, in cents.<br />If provided, the Seller will have to handle shipping by himself. <code>packageFormat</code> and <code>shippingProviders</code> will be ignored, and automatic shipping costs calculation and shipping label generation will be disabled.
     *
     * @return self
     */
    public function setShippingCosts($shippingCosts)
    {
        $this->container['shippingCosts'] = $shippingCosts;

        return $this;
    }

    /**
     * Gets packageFormat
     *
     * @return \TripartieWebAPI\Model\RequestCreateTransactionTemplatePackageFormat|null
     */
    public function getPackageFormat()
    {
        return $this->container['packageFormat'];
    }

    /**
     * Sets packageFormat
     *
     * @param \TripartieWebAPI\Model\RequestCreateTransactionTemplatePackageFormat|null $packageFormat packageFormat
     *
     * @return self
     */
    public function setPackageFormat($packageFormat)
    {
        $this->container['packageFormat'] = $packageFormat;

        return $this;
    }

    /**
     * Gets shippingProviders
     *
     * @return string[]|null
     */
    public function getShippingProviders()
    {
        return $this->container['shippingProviders'];
    }

    /**
     * Sets shippingProviders
     *
     * @param string[]|null $shippingProviders Allowed shipping providers.<br /><strong>Required for automatic shipping costs and shipping label generation.</strong>
     *
     * @return self
     */
    public function setShippingProviders($shippingProviders)
    {
        $allowedValues = $this->getShippingProvidersAllowableValues();
        if (!is_null($shippingProviders) && array_diff($shippingProviders, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shippingProviders', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shippingProviders'] = $shippingProviders;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency code (ISO 4217).
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return string
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param string $flow The desired flow (see <a href=\"#tag/Flows\">Flows</a>).
     *
     * @return self
     */
    public function setFlow($flow)
    {
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets productCategory
     *
     * @return string|null
     */
    public function getProductCategory()
    {
        return $this->container['productCategory'];
    }

    /**
     * Sets productCategory
     *
     * @param string|null $productCategory The product category (required for improved anti-fraud protection).
     *
     * @return self
     */
    public function setProductCategory($productCategory)
    {
        $allowedValues = $this->getProductCategoryAllowableValues();
        if (!is_null($productCategory) && !in_array($productCategory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'productCategory', must be one of '%s'",
                    $productCategory,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['productCategory'] = $productCategory;

        return $this;
    }

    /**
     * Gets adUrl
     *
     * @return string|null
     */
    public function getAdUrl()
    {
        return $this->container['adUrl'];
    }

    /**
     * Sets adUrl
     *
     * @param string|null $adUrl The original Ad's URL.
     *
     * @return self
     */
    public function setAdUrl($adUrl)
    {
        $this->container['adUrl'] = $adUrl;

        return $this;
    }

    /**
     * Gets allowPriceChange
     *
     * @return bool|null
     */
    public function getAllowPriceChange()
    {
        return $this->container['allowPriceChange'];
    }

    /**
     * Sets allowPriceChange
     *
     * @param bool|null $allowPriceChange Allow price negociation?
     *
     * @return self
     */
    public function setAllowPriceChange($allowPriceChange)
    {
        $this->container['allowPriceChange'] = $allowPriceChange;

        return $this;
    }

    /**
     * Gets allowInPerson
     *
     * @return bool|null
     */
    public function getAllowInPerson()
    {
        return $this->container['allowInPerson'];
    }

    /**
     * Sets allowInPerson
     *
     * @param bool|null $allowInPerson Allow hand-over?
     *
     * @return self
     */
    public function setAllowInPerson($allowInPerson)
    {
        $this->container['allowInPerson'] = $allowInPerson;

        return $this;
    }

    /**
     * Gets allowDelivery
     *
     * @return bool|null
     */
    public function getAllowDelivery()
    {
        return $this->container['allowDelivery'];
    }

    /**
     * Sets allowDelivery
     *
     * @param bool|null $allowDelivery Allow delivery?
     *
     * @return self
     */
    public function setAllowDelivery($allowDelivery)
    {
        $this->container['allowDelivery'] = $allowDelivery;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string|null $picture Ad picture, in <strong>base64 format</strong>.<br /> Max initial file size: 2Mo.<br /> <strong>You MUST send only the binary code.</strong> Do not send the first part that some converters add into the binary code which is <code>data:image/png;base64,</code>.
     *
     * @return self
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


