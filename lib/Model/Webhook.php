<?php
/**
 * Webhook
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  TripartieWebAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tripartie Web API
 *
 * This document describes all use cases offered by the Tripartie Web API.<br /><br /> The Tripartie Web API allows you to easily create Transaction templates.<br /> A Transaction template allows a User (the Buyer) to safely initiate a Transaction pre-configured by another User (the Seller).<br /> This allows you to add a Secured Payment button on your website pages.<br /><br /> To facilitate working with the Web API, we built libraries for common development environment:<br/> <ul class=\"bullet\">   <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/tripartie/webapi-jsclient\">Javascript</a></li> </ul> <br/> You're reading the documentation for version 1.0 of the Web API.<br/> Go to version <select id=\"version-switcher\"></select>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@tripartie.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TripartieWebAPI\Model;

use \ArrayAccess;
use \TripartieWebAPI\ObjectSerializer;

/**
 * Webhook Class Doc Comment
 *
 * @category Class
 * @package  TripartieWebAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Webhook implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Webhook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'eventType' => 'string',
        'transactionTemplateExternalId' => 'string',
        'transactionTemplateTripartieId' => 'int',
        'buyerExternalId' => 'string',
        'buyerTripartieId' => 'int',
        'eventTimestamp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uuid' => null,
        'eventType' => null,
        'transactionTemplateExternalId' => null,
        'transactionTemplateTripartieId' => null,
        'buyerExternalId' => null,
        'buyerTripartieId' => null,
        'eventTimestamp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'eventType' => 'eventType',
        'transactionTemplateExternalId' => 'transactionTemplateExternalId',
        'transactionTemplateTripartieId' => 'transactionTemplateTripartieId',
        'buyerExternalId' => 'buyerExternalId',
        'buyerTripartieId' => 'buyerTripartieId',
        'eventTimestamp' => 'eventTimestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'eventType' => 'setEventType',
        'transactionTemplateExternalId' => 'setTransactionTemplateExternalId',
        'transactionTemplateTripartieId' => 'setTransactionTemplateTripartieId',
        'buyerExternalId' => 'setBuyerExternalId',
        'buyerTripartieId' => 'setBuyerTripartieId',
        'eventTimestamp' => 'setEventTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'eventType' => 'getEventType',
        'transactionTemplateExternalId' => 'getTransactionTemplateExternalId',
        'transactionTemplateTripartieId' => 'getTransactionTemplateTripartieId',
        'buyerExternalId' => 'getBuyerExternalId',
        'buyerTripartieId' => 'getBuyerTripartieId',
        'eventTimestamp' => 'getEventTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EVENT_TYPE_PROPOSITION_SENT = 'proposition_sent';
    const EVENT_TYPE_PROPOSITION_ACCEPTED = 'proposition_accepted';
    const EVENT_TYPE_PROPOSITION_REJECTED = 'proposition_rejected';
    const EVENT_TYPE_TRANSACTION_COMPLETED = 'transaction_completed';
    const EVENT_TYPE_TRANSACTION_CANCELED = 'transaction_canceled';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventTypeAllowableValues()
    {
        return [
            self::EVENT_TYPE_PROPOSITION_SENT,
            self::EVENT_TYPE_PROPOSITION_ACCEPTED,
            self::EVENT_TYPE_PROPOSITION_REJECTED,
            self::EVENT_TYPE_TRANSACTION_COMPLETED,
            self::EVENT_TYPE_TRANSACTION_CANCELED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['eventType'] = $data['eventType'] ?? null;
        $this->container['transactionTemplateExternalId'] = $data['transactionTemplateExternalId'] ?? null;
        $this->container['transactionTemplateTripartieId'] = $data['transactionTemplateTripartieId'] ?? null;
        $this->container['buyerExternalId'] = $data['buyerExternalId'] ?? null;
        $this->container['buyerTripartieId'] = $data['buyerTripartieId'] ?? null;
        $this->container['eventTimestamp'] = $data['eventTimestamp'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($this->container['eventType']) && !in_array($this->container['eventType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'eventType', must be one of '%s'",
                $this->container['eventType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid The Webhook UUID.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets eventType
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['eventType'];
    }

    /**
     * Sets eventType
     *
     * @param string|null $eventType The webhook type.
     *
     * @return self
     */
    public function setEventType($eventType)
    {
        $allowedValues = $this->getEventTypeAllowableValues();
        if (!is_null($eventType) && !in_array($eventType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'eventType', must be one of '%s'",
                    $eventType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['eventType'] = $eventType;

        return $this;
    }

    /**
     * Gets transactionTemplateExternalId
     *
     * @return string|null
     */
    public function getTransactionTemplateExternalId()
    {
        return $this->container['transactionTemplateExternalId'];
    }

    /**
     * Sets transactionTemplateExternalId
     *
     * @param string|null $transactionTemplateExternalId The Transaction template's External ID.
     *
     * @return self
     */
    public function setTransactionTemplateExternalId($transactionTemplateExternalId)
    {
        $this->container['transactionTemplateExternalId'] = $transactionTemplateExternalId;

        return $this;
    }

    /**
     * Gets transactionTemplateTripartieId
     *
     * @return int|null
     */
    public function getTransactionTemplateTripartieId()
    {
        return $this->container['transactionTemplateTripartieId'];
    }

    /**
     * Sets transactionTemplateTripartieId
     *
     * @param int|null $transactionTemplateTripartieId The Transaction template's Tripartie ID.
     *
     * @return self
     */
    public function setTransactionTemplateTripartieId($transactionTemplateTripartieId)
    {
        $this->container['transactionTemplateTripartieId'] = $transactionTemplateTripartieId;

        return $this;
    }

    /**
     * Gets buyerExternalId
     *
     * @return string|null
     */
    public function getBuyerExternalId()
    {
        return $this->container['buyerExternalId'];
    }

    /**
     * Sets buyerExternalId
     *
     * @param string|null $buyerExternalId The Buyer's External ID.
     *
     * @return self
     */
    public function setBuyerExternalId($buyerExternalId)
    {
        $this->container['buyerExternalId'] = $buyerExternalId;

        return $this;
    }

    /**
     * Gets buyerTripartieId
     *
     * @return int|null
     */
    public function getBuyerTripartieId()
    {
        return $this->container['buyerTripartieId'];
    }

    /**
     * Sets buyerTripartieId
     *
     * @param int|null $buyerTripartieId The Buyer's Tripartie ID.
     *
     * @return self
     */
    public function setBuyerTripartieId($buyerTripartieId)
    {
        $this->container['buyerTripartieId'] = $buyerTripartieId;

        return $this;
    }

    /**
     * Gets eventTimestamp
     *
     * @return int|null
     */
    public function getEventTimestamp()
    {
        return $this->container['eventTimestamp'];
    }

    /**
     * Sets eventTimestamp
     *
     * @param int|null $eventTimestamp The event timestamp.
     *
     * @return self
     */
    public function setEventTimestamp($eventTimestamp)
    {
        $this->container['eventTimestamp'] = $eventTimestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


